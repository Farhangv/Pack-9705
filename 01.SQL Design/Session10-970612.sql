CREATE DATABASE Session10
GO
USE Session10
GO
CREATE TABLE [User]
(
	Id INT PRIMARY KEY,
	[Username] NVARCHAR(50) NOT NULL UNIQUE
)
GO
CREATE TABLE ErrorLog
(
	Id INT IDENTITY PRIMARY KEY,
	[Message] NVARCHAR(500),
	Code INT,
	[TableName] NVARCHAR(50)
)
GO
ALTER PROC UserInsert
(
	@Id INT,
	@Username NVARCHAR(50),
	@ErrorMessage NVARCHAR(500) OUTPUT
)
--WITH ENCRYPTION
AS
BEGIN
	BEGIN TRY
		INSERT INTO [User]
		VALUES (@Id, @Username)
	END TRY
	BEGIN CATCH
		INSERT INTO [ErrorLog]
		VALUES(ERROR_MESSAGE(), ERROR_NUMBER(), 'User')

		--SET @ErrorMessage = ERROR_MESSAGE()
		SELECT @ErrorMessage = CASE ERROR_NUMBER()
		WHEN 515 THEN N'نام کاربری نباید خالی باشد'
		WHEN 2627 THEN N'مقدار تکراری مجاز نیست'
		ELSE ERROR_MESSAGE()
		END
		RETURN ERROR_NUMBER()
	END CATCH
END
GO
SELECT 10/0
GO
SELECT FirstName + ' ' + MiddleName + ' ' + LastName
FROM AdventureWorks.Person.Person
GO
DECLARE @ErrorId INT
DECLARE @ErrorMessage NVARCHAR(500)
EXEC @ErrorId = UserInsert 3, 'bbb', @ErrorMessage OUTPUT

SELECT @ErrorId, @ErrorMessage
GO
CREATE TRIGGER TG_UserNoDelete
ON [User]
FOR DELETE,UPDATE
AS
BEGIN
	ROLLBACK TRAN
END
GO
DELETE FROM [USER]
WHERE Id = 1
GO
SELECT * FROM [User]
GO
UPDATE [User] SET Username = 'abc'
WHERE Id = 1
GO
SELECT ProductId, Name, Color
INTO Product
FROM AdventureWorks.Production.Product
GO
CREATE TABLE ProductArchive
(
	ProductId INT PRIMARY KEY,
	Name NVARCHAR(50),
	Color NVARCHAR(50)
)
GO
CREATE TRIGGER TG_ProductArchive
ON Product
FOR DELETE
AS
BEGIN
	INSERT INTO ProductArchive 
	SELECT ProductId, Name, Color 
	FROM deleted
END
GO
DELETE FROM Product WHERE ProductId = 1
GO
SELECT * FROM Product
GO
SELECT * FROM ProductArchive
GO
CREATE TABLE [Test]
(
	Id INT IDENTITY PRIMARY KEY,
	[Name] NVARCHAR(10) NOT NULL UNIQUE
)
GO
INSERT INTO Test VALUES ('V2')
GO
SELECT * FROM Test
GO
DROP TRIGGER TG_ProductArchive
GO
ALTER TABLE Product
ADD IsActive BIT DEFAULT 1
GO
SELECT * FROM Product
GO
UPDATE Product SET IsActive = 1
GO
CREATE TRIGGER TG_DisableProduct
ON Product
INSTEAD OF DELETE
AS
BEGIN
	UPDATE  Product
	SET IsActive = 0
	WHERE ProductID 
		IN (SELECT ProductID FROM deleted)
END
GO
DELETE FROM Product WHERE ProductId BETWEEN 300 AND 330
GO
SELECT * FROM Product
GO
SET IDENTITY_INSERT Test ON
GO
INSERT INTO Test(Id, Name) VALUES (11, 'V4')
GO
SET IDENTITY_INSERT Test OFF
GO
CREATE TRIGGER TG_NoDropTable
ON DATABASE
FOR DROP_TABLE
AS
BEGIN
	ROLLBACK TRAN
END
GO
DROP TABLE Test
GO
USE Session08
GO
SELECT * FROM INFORMATION_SCHEMA.TABLES
GO
DROP TABLE [User]
GO
USE Session10
GO
CREATE TRIGGER TG_NoDropDatabase
ON ALL SERVER
FOR DROP_DATABASE
AS
BEGIN
	ROLLBACK TRAN
END
GO
DROP DATABASE Session05
GO
CREATE TRIGGER TG_NoDropTrigger
ON ALL SERVER
FOR DROP_TRIGGER
AS
	ROLLBACK TRAN
GO
DROP TRIGGER TG_NoDropTrigger
ON ALL SERVER
GO
ALTER TRIGGER TG_Test
ON ALL SERVER
FOR CREATE_TABLE,CREATE_DATABASE,DROP_TABLE
AS
BEGIN
	DECLARE @Data XML
	DECLARE @Login NVARCHAR(50)
	SELECT @Data = EVENTDATA()
	SELECT @Login = 
	@Data.value('(/EVENT_INSTANCE/LoginName)[1]', 'NVARCHAR(50)')
	SELECT @Login

END
GO
CREATE DATABASE Session10_4
GO
SELECT EVENTDATA()